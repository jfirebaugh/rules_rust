From ef519afd270781a41a54b485e5b54462790e2eb5 Mon Sep 17 00:00:00 2001
From: John Firebaugh <john.firebaugh@gmail.com>
Date: Fri, 23 Dec 2022 20:06:00 -0800
Subject: [PATCH] Add support for WORKSPACE.bazel Fixes #97

---
 .../private/bazel_integration_test.bzl        | 25 +++++++++++++++++--
 tools/find_child_workspace_packages.sh        |  5 +---
 tools/shared_fns.sh                           |  2 +-
 tools/update_deleted_packages.sh              |  9 +------
 4 files changed, 26 insertions(+), 15 deletions(-)

diff --git a/bazel_integration_test/private/bazel_integration_test.bzl b/bazel_integration_test/private/bazel_integration_test.bzl
index fa1ceb3..5207bd7 100644
--- a/bazel_integration_test/private/bazel_integration_test.bzl
+++ b/bazel_integration_test/private/bazel_integration_test.bzl
@@ -15,6 +15,27 @@ load(":integration_test_utils.bzl", "integration_test_utils")
 #   CC: if Bazel use specific C-compiler it should be inherited by default
 _DEFAULT_ENV_INHERIT = ["SUDO_ASKPASS", "HOME", "CC"]
 
+def _select_workspace_file_impl(ctx):
+    workspace_file = paths.join(ctx.attr.workspace_path, "WORKSPACE")
+    workspace_bazel = paths.join(ctx.attr.workspace_path, "WORKSPACE.bazel")
+    for file in ctx.attr.srcs.files.to_list():
+        if file.path.endswith(workspace_file) or file.path.endswith(workspace_bazel):
+            return [DefaultInfo(files = depset([file]))]
+    fail("Can't find WORKSPACE or WORKSPACE.bazel in %s" % ctx.attr.workspace_path)
+
+select_workspace_file = rule(
+    implementation = _select_workspace_file_impl,
+    attrs = {
+        "srcs": attr.label(
+            allow_files = True,
+            mandatory = True,
+        ),
+        "workspace_path": attr.string(
+            mandatory = True,
+        ),
+    },
+)
+
 def bazel_integration_test(
         name,
         test_runner,
@@ -115,10 +136,10 @@ def bazel_integration_test(
         # convey the actual workspace directory to the rule. The location of
         # the WORKSPACE file seems to be the best way to do this.
         bazel_wksp_file_name = name + "_bazel_workspace_file"
-        select_file(
+        select_workspace_file(
             name = bazel_wksp_file_name,
             srcs = workspace_files_name,
-            subpath = paths.join(workspace_path, "WORKSPACE"),
+            workspace_path = workspace_path,
         )
 
         args.extend(["--workspace", "$(location :%s)" % (bazel_wksp_file_name)])
diff --git a/tools/find_child_workspace_packages.sh b/tools/find_child_workspace_packages.sh
index 46a0325..13c6478 100755
--- a/tools/find_child_workspace_packages.sh
+++ b/tools/find_child_workspace_packages.sh
@@ -66,11 +66,8 @@ while (("$#")); do
   esac
 done
 
-if [[ -z "${workspace_root:-}" ]] && [[ -n "${BUILD_WORKING_DIRECTORY:-}"  ]]; then
-  workspace_root="${BUILD_WORKING_DIRECTORY:-}"
-fi
 if [[ -z "${workspace_root:-}" ]]; then
-  workspace_root="$(dirname "$(upsearch WORKSPACE)")"
+  workspace_root="${BUILD_WORKSPACE_DIRECTORY}"
 fi
 if [[ ! -d "${workspace_root:-}" ]]; then
   fail "The workspace root was not found. ${workspace_root:-}"
diff --git a/tools/shared_fns.sh b/tools/shared_fns.sh
index 7c92bdf..d831f04 100644
--- a/tools/shared_fns.sh
+++ b/tools/shared_fns.sh
@@ -4,5 +4,5 @@ find_workspace_dirs() {
   local path="${1}"
   # Make sure that the -print0 is the last primary for find. Otherwise, you
   # will get undesirable results.
-  find "${path}" -name "WORKSPACE" -print0  | xargs -0 -n 1 dirname
+  find "${path}" -name "WORKSPACE" -o -name "WORKSPACE.bazel" -print0  | xargs -0 -n 1 dirname
 }
diff --git a/tools/update_deleted_packages.sh b/tools/update_deleted_packages.sh
index db73b1c..ec435c8 100755
--- a/tools/update_deleted_packages.sh
+++ b/tools/update_deleted_packages.sh
@@ -71,15 +71,8 @@ while (("$#")); do
 done
 
 
-# Try to search for the workspace root
 if [[ -z "${workspace_root:-}" ]]; then
-  # If the BUILD_WORKING_DIRECTORY exists, it will be the directory from which the command was run
-  if [[ -n "${BUILD_WORKING_DIRECTORY:-}"  ]]; then 
-    search_start_dir="${BUILD_WORKING_DIRECTORY}"
-  else
-    search_start_dir="${PWD}"
-  fi
-  workspace_root="$(dirname "$(upsearch --start_dir "${search_start_dir}" WORKSPACE)")"
+  workspace_root="${BUILD_WORKSPACE_DIRECTORY}"
 fi
 if [[ ! -d "${workspace_root:-}" ]]; then
   exit_with_msg "The workspace root was not found. ${workspace_root:-}"
-- 
2.39.0

